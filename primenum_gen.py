# -*- coding: utf-8 -*-
"""
Created on Wed Nov 11 13:53:33 2020

@author: =GV=
"""

def naturalNums(n = 2):
    yield n
    yield from naturalNums(n + 1)
    

def primeSieve(s):
    """
    Parameters
    ----------
    s : generator
        assumes any generator that yields a series of natural numbers

    Yields
    ------
    int
        given the appropriate input, yields the prime numbers in the series
        of real numbers generated by the input excluding 1
    NOTE:   function uses a generator naturalNums() as a helper function that
            generates real numbers from the infinite series of real numbers
            using the 'Sieve of Eratosthenes' algorithm
    """
    n = next(s)
    yield n
    yield from primeSieve(i for i in s if not i % n == 0 )  # Sieve of Eratosthenes where all multiples of n is removed/filtered from the sequence of s where s is all natural numbers


def genPrimes():
    """
    Yields
    ------
    temp : int
        yields prime numbers starting from 2 onwards distinct from primeSieve() which uses the Sieve of Erastothenes method
    """
    x = 2
    while True:
        for y in range(2, x + 1):
            if x % y == 0 and y < x:
                x += 1
                break
            elif y == x:
                temp, x = x, x+1
                yield temp
            else:
                continue


# # test
# n = 20    # number of primes
# numbers = naturalNums()
# primes = primeSieve(numbers)
# primes2 = genPrimes()

# for i in range(n):
#     print('primeSieve = \t', next(primes))
#     print('genPrimes = \t', next(primes2), '\n')

    
   